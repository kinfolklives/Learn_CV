import cv2

# cv2.VideoCapture(n) / n : 카메라의 장치 번호 (내장 0, 외장 1~n)  
capture = cv2.VideoCapture(0) 

# capture.set(option, n) : 프레임 너비, 높이 등등 옵션 넣을 수 있음, n : 값
capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# while문으로 영상 출력 반복
# capture.read() : 카메라 상태와 프레임 받아옴
# ret: 카메라 상태가 저장, 정상 > True 반환 
# frame: 현재 프레임이 저장
# cv2.imshow("윈도우 창 제목", 이미지) : 윈도우 창에 이미지 보여주기

while True:
    ret, frame = capture.read()
    cv2.imshow("VideoFrame", frame)
    if cv2.waitKey(1) > 0: break

# if문을 이용하여 키 입력이 있을 때 까지 while문을 반복합니다.
# cv2.waitkey(time)이며 time마다 키 입력상태를 받아옵니다.
# 키가 입력될 경우, 해당 키의 아스키 값을 반환합니다.
# 즉, 어떤 키라도 누를 경우, break하여 while문을 종료합니다.
# Tip : time이 0일 경우, 지속적으로 검사하여 프레임이 넘어가지 않습니다.
# Tip : if cv2.waitKey(1) == ord('q'): break으로 사용할 경우, q가 입력될 때 while문을 종료합니다.

capture.release() # 메모리를 해제합니다.
cv2.destroyAllWindows() # 모든 윈도우창을 닫습니다.

# Tip : cv2.destroyWindow("윈도우 창 제목")을 이용하여 특정 윈도우 창만 닫을 수 있습니다.

----------- < 2 > ------------------------------------------------------------------------------
import cv2

image = cv2.imread("Image/lunar.jpg", cv2.IMREAD_ANYCOLOR)

# image = cv2.imread("경로", mode) > 이미지를 불러와 변수에 저장
# mode 
# cv2.IMREAD_UNCHANGED : 원본 사용
# cv2.IMREAD_GRAYSCALE : 1 채널, 그레이스케일 적용
# cv2.IMREAD_COLOR : 3 채널, BGR 이미지 사용
# cv2.IMREAD_ANYDEPTH : 이미지에 따라 정밀도를 16/32비트 또는 8비트로 사용
# cv2.IMREAD_ANYCOLOR : 가능한 3 채널, 색상 이미지로 사용
# cv2.IMREAD_REDUCED_GRAYSCALE_2 : 1 채널, 1/2 크기, 그레이스케일 적용
# cv2.IMREAD_REDUCED_GRAYSCALE_4 : 1 채널, 1/4 크기, 그레이스케일 적용
# cv2.IMREAD_REDUCED_GRAYSCALE_8 : 1 채널, 1/8 크기, 그레이스케일 적용
# cv2.IMREAD_REDUCED_COLOR_2 : 3 채널, 1/2 크기, BGR 이미지 사용
# cv2.IMREAD_REDUCED_COLOR_4 : 3 채널, 1/4 크기, BGR 이미지 사용
# cv2.IMREAD_REDUCED_COLOR_8 : 3 채널, 1/8 크기, BGR 이미지 사용

cv2.imshow("Moon", image)

height, width, channel = image.shape  # 해당 이미지의 높이, 너비, 채널의 값을 확인
print(height, width , channel)

# Tip : 유효 비트가 많을 수록 더 정밀해집니다.
# Tip : 채널이 3일 경우, 다색 이미지입니다. 채널이 1일 경우, 단색 이미지입니다.


# cv2.waitkey(time): time마다 키 입력상태를 받아옴. 0일 경우, 지속적으로 검사하여 해당 구문을 넘어가지 않습니다.
cv2.waitKey(0) 
cv2.destroyAllWindows()

--------< 3 >-----------------------
# 동영상 파일에서 이미지를 얻어와 프레임을 재생

import cv2

# cv2.VideoCapture("경로") : 동영상 파일에서 프레임을 받아옴
capture = cv2.VideoCapture("Image/Star.mp4")

while True:
    # if문을 이용하여 가장 처음 현재 프레임 개수와 총 프레임 개수를 비교
    # capture.get(속성) : capture의 속성을 반환
    # CAP_PROP_POS_FRAMES :현재 프레임 개수
    # cv2.CAP_PROP_FRAME_COUNT : 총 프레임 개수
    
    # 같을 경우, 마지막 프레임이므로, capture.open(경로)를 이용하여 다시 동영상 파일을 불러옴.
    if(capture.get(cv2.CAP_PROP_POS_FRAMES) == capture.get(cv2.CAP_PROP_FRAME_COUNT)):
        capture.open("Image/Star.mp4") 

    ret, frame = capture.read()
    cv2.imshow("VideoFrame", frame)

    if cv2.waitKey(33) > 0: break # 33ms마다 프레임을 재생

capture.release()
cv2.destroyAllWindows()


# VideoCapture 멤버
# capture.get(속성) : VideoCapture의 속성을 반환합니다.
# capture.grab() : Frame의 호출 성공 유/무를 반환합니다.
# capture.isOpened() : VideoCapture의 성공 유/무를 반환합
# capture.open(카메라 장치 번호 또는 경로) : 카메라나 동영상 파일을 엽니다.
# capture.release() : VideoCapture의 장치를 닫고 메모리를 해제합니다.
# capture.retrieve() : VideoCapture의 프레임과 플래그를 반환합니다.
# capture.set(속성, 값) : VideoCapture의 속성의 값을 설정합니다.


VideoCapture 속성
속성	의미	비고
cv2.CAP_PROP_FRAME_WIDTH	프레임의 너비	-
cv2.CAP_PROP_FRAME_HEIGHT	프레임의 높이	-
cv2.CAP_PROP_FRAME_COUNT	프레임의 총 개수	-
cv2.CAP_PROP_FPS	        프레임 속도	-
cv2.CAP_PROP_FOURCC	        코덱 코드	-
cv2.CAP_PROP_BRIGHTNESS	    이미지 밝기	       카메라만 해당
cv2.CAP_PROP_CONTRAST	    이미지 대비	       카메라만 해당
cv2.CAP_PROP_SATURATION	    이미지 채도	       카메라만 해당
cv2.CAP_PROP_HUE	        이미지 색상	       카메라만 해당
cv2.CAP_PROP_GAIN	        이미지 게인	       카메라만 해당
cv2.CAP_PROP_EXPOSURE	    이미지 노출	       카메라만 해당
cv2.CAP_PROP_POS_MSEC	    프레임 재생        시간	ms 반환
cv2.CAP_PROP_POS_FRAMES	    현재 프레임	       프레임의 총 개수 미만
CAP_PROP_POS_AVI_RATIO      비디오 파일 상대 위치	0 = 시작, 1 = 끝
https://076923.github.io/posts/Python-opencv-4/


--------------< 4 > ------------------

# 영상이나 이미지를 대칭시켜 띄울 수 있습니다. 상하 또는 좌우방향으로 대칭할 수 있습니다.

# 영상이나 이미지를 대칭시켜 띄울 수 있습니다. 상하 또는 좌우방향으로 대칭할 수 있습니다.

import cv2

# src 선언, 이미지를 불러움.
src = cv2.imread("Image/glass.jpg", cv2.IMREAD_COLOR) 

# cv2.flip(원본 이미지, 대칭 방법) - 대칭방법: 0 or 1
# 0: 상하, 1: 좌우 
# 결과 이미지로 사용할 dst를 선언하고 대칭 함수를 적용
dst = cv2.flip(src, 0)                                

# 이미지를 출력
cv2.imshow("src", src)
cv2.imshow("dst", dst)

cv2.waitKey(0)
cv2.destroyAllWindows()


# 대칭 방법 중 상수를 0보다 낮은 값을 입력할 경우, 상하 대칭으로 간주합니다.
# 대칭 방법 중 상수를 1보다 높은 값을 입력할 경우, 좌우 대칭으로 간주합니다.


---------------- < 5 > --------------------
# 영상이나 이미지를 회전시켜 띄울 수 있습니다. 90°, 45°, -45° 등 다양한 각도로 회전이 가능합니다.

import cv2

# 원본 이미지로 사용할 src를 선언하고 이미지를 불러옴
src = cv2.imread("Image/ara.jpg", cv2.IMREAD_COLOR)

# 높이, 너비, 채널의 값을 저장
height, width, channel = src.shape

# cv2.getRotationMatrix2D((중심점 X좌표, 중심점 Y좌표), 각도, 스케일)
# matrix에 회전 배열을 생성하여 저장
# 중심점  - Tuple형태로 사용하며 회전할 기준점을 설정
# 각도 -  회전할 각도
# 스케일 - 이미지의 확대 비율 설정
matrix = cv2.getRotationMatrix2D((width/2, height/2), 90, 1)

# cv2.warpAffine(원본 이미지, 배열, (결과 이미지 너비, 결과 이미지 높이))
# 결과 이미지로 사용할 dst를 선언하고 회전 함수를 적용
dst = cv2.warpAffine(src, matrix, (width, height))
# 결과 이미지의 너비와 높이로 크기가 선언되며 배열에 따라 이미지가 회전

cv2.imshow("src", src)
cv2.imshow("dst", dst)
cv2.waitKey(0)
cv2.destroyAllWindows()

# * matrix를 numpy형식으로 선언하여 warpAffine을 적용하여 변환할 수 있습니다.


--------------< 6 > ------------------------

# 영상이나 이미지의 크기를 원하는 크기로 조절할 수 있습니다.

import cv2


src = cv2.imread("Image/champagne.jpg", cv2.IMREAD_COLOR)

# cv2.resize(원본 이미지, 결과 이미지 크기, 보간법)
# 결과 이미지 크기는 Tuple형을 사용하며, (너비, 높이)를 의미
# 보간법은 이미지의 크기를 변경하는 경우, 변형된 이미지의 픽셀은 추정해서 값을 할당
# 보간법을 이용하여 픽셀들의 값을 할당합니다.
# * 보간법(내삽) : 끝점의 값이 주어졌을 때 그 사이에 위치한 값을 추정하기 위하여 직선 거리에 따라 선형적으로 계산하는 방법
dst = cv2.resize(src, dsize=(640, 480), interpolation=cv2.INTER_AREA)

# cv2.resize(원본 이미지, dsize=(0, 0), 가로비, 세로비, 보간법)
# 결과 이미지 크기가 (0, 0)으로 크기를 설정하지 않은 경우, fx와 fy를 이용하여 이미지의 비율을 조절
# fx가 0.3인 경우, 원본 이미지 너비의 0.3배로 변경.
# fy가 0.7인 경우, 원본 이미지 높이의 0.7배로 변경.
dst2 = cv2.resize(src, dsize=(0, 0), fx=0.3, fy=0.7, interpolation=cv2.INTER_LINEAR)

cv2.imshow("src", src)
cv2.imshow("dst", dst)
cv2.imshow("dst2", dst2)

cv2.waitKey(0)
cv2.destroyAllWindows()

# Tip : 결과 이미지 크기와 가로비, 세로비가 모두 설정된 경우, 결과 이미지 크기의 값으로 이미지의 크기가 조절됩니다.

# interpolation 속성
# 속성	의미
# cv2.INTER_NEAREST	이웃 보간법
# cv2.INTER_LINEAR	쌍 선형 보간법
# cv2.INTER_LINEAR_EXACT	비트 쌍 선형 보간법
# cv2.INTER_CUBIC	바이큐빅 보간법
# cv2.INTER_AREA	영역 보간법
# cv2.INTER_LANCZOS4	Lanczos 보간법
# https://076923.github.io/posts/Python-opencv-8/



















